# Author: William Z Chadwick
# Date Created: 08/30/2022
# Date Modified: 08/30/2022
# Description: A place for my notes on the week 5 videos

---

object oriented programming

video 1

---

JavaScript

traditionally a functional programming language, until ECMA6/ES6

made Object Oriented Programming accessible in JavaScript

objects is how we already think of things in human thinking

properties; [philosophical] attributes;

objects

dvd players as objects

-
-
-
-
-


dvds as objects
-
-
-

---

let objects = ( attributes + functionality );

---

4 pillars of object oriented programming:


1 Abstraction

Abstraction example: motion; a vehicle moves; all vehicles move;

2 encapsulation 

hides details of how it works; driving a car, hides the data about how the car works; this suggests

3 inheritance

abstraction, animal; inherits communication; 

4 polymorphism

animals all inherit communication, but communication is polymorphic because communication can be barks, chirps, or human speech, just as examples.

---

using classes;

end of the first video.

---

---

video 2

classes video;

grouping attributes and functionality together; variables and methods; "student"

a class that represents a student

//coding examples begin here; camel case for most conventions; Pascal case is used for classes; Student (?I think?)

A.

class student {
	constructor() {
		this.firstName = "Sam";
		this.lastName = "Smith";
		this.phoneNumber = "4805555555";
		this.grade = "A";
	}

}

B.

class student {
	constructor(firstName, lastName, phoneNumber, grade) {
		this.firstName = "Sam";
		this.lastName = "Smith";
		this.phoneNumber = "4805555555";
		this.grade = "A";
	}
}

C.

class student {
	constructor(firstName, lastName, phoneNumber, grade) {
		this.firstName = firstName;
		this.lastName = lastName;
		this.phoneNumber = phoneNumber;
		this.grade = grade;
}

	introduce() {
		//a method is a function that belongs to an object or a class
		console.log(`$(this.firstName) $(lastName) can be reached at $(this.phoneNumber)`);
}
}

let student1 = new Student("Tom", "Sawyer", "623555555", "A");
let student2 = new Student("Sam", "Smith", "4805555555", "A");

student1.introduce();
student2.introduce();

//gives error, because left out this.lastName, "this. keyword"

//console.log........$(this.lastName)

parameters help us out in the class declaration.

//
//
//

let student = new Student();
student.firstName = "Tommy";
student.lastname = "Smith";

//^^^^^this is a lot more code than just passing the values into a constructor.

//how do we know when to create a class?

//**each class should be in charge of one thing.**

//we instantiate an instance of our class

//programming and platonism; structural platonism, methodological platonism?

end of video 2;

---

---

video 3


